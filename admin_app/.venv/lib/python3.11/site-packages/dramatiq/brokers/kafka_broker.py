from kafka import KafkaProducer, KafkaConsumer
from dramatiq.broker import Broker
from dramatiq.message import Message
import json


class KafkaBroker(Broker):
    def __init__(self, bootstrap_servers, url=None, middleware=None):
        super().__init__(middleware)
        self.bootstrap_servers = bootstrap_servers
        self.producer = KafkaProducer(bootstrap_servers=self.bootstrap_servers)

    def declare_queue(self, queue_name):
        # Kafka does not require explicit queue declaration
        pass

    def enqueue(self, message, *, delay=None):
        topic = message.queue_name.encode()
        value = message.asdict().encode()

        # If delay is specified, schedule the message for later delivery
        if delay is not None:
            raise NotImplementedError("Delayed message delivery is not supported by Kafka broker")

        # Produce the message to the Kafka topic
        self.producer.send(topic, value)

        return message

    def consume(self, queue_name, prefetch=1, timeout=30000):
        # Kafka consumers are not directly iterable, so we wrap it with a custom Consumer class
        return KafkaConsumerWrapper(self.bootstrap_servers, queue_name, prefetch, timeout)


class KafkaConsumerWrapper:
    def __init__(self, bootstrap_servers, topic, prefetch, timeout):
        self.consumer = KafkaConsumer(topic, bootstrap_servers=bootstrap_servers)
        self.prefetch = prefetch
        self.timeout = timeout

    def __iter__(self):
        return self

    def __next__(self):
        # Kafka consumers fetch messages in batches, so we yield one message at a time
        message_batch = self.consumer.poll(timeout_ms=self.timeout, max_records=self.prefetch)
        for partition, records in message_batch.items():
            for record in records:
                value = record.value.decode()
                # Assuming the message payload is a JSON-encoded string, you can modify this part as needed
                # to deserialize the message into a Dramatiq message object.
                # For example, you can use the `dramatiq.Message.from_dict()` method.
                message = Message.from_dict(json.loads(value))
                return message

        raise StopIteration()
